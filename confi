#if 0
	shc Version 4.0.3, Generic Shell Script Compiler
	GNU GPL Version 3 Md Jahidul Hamid <jahidulhamid@yahoo.com>

	shc -f confi.sh 
#endif

static  char data [] = 
#define      tst1_z	22
#define      tst1	((&data[1]))
	"\046\336\362\144\355\365\044\250\235\345\116\124\044\221\351\350"
	"\013\355\224\246\366\231\012\030"
#define      opts_z	1
#define      opts	((&data[24]))
	"\151"
#define      rlax_z	1
#define      rlax	((&data[25]))
	"\214"
#define      tst2_z	19
#define      tst2	((&data[29]))
	"\301\004\363\045\137\066\340\207\122\077\274\323\375\064\326\001"
	"\354\217\207\354\044\371\230\027"
#define      shll_z	41
#define      shll	((&data[58]))
	"\233\225\065\107\272\251\165\075\025\213\027\004\171\107\252\227"
	"\143\153\234\203\361\277\060\165\262\074\340\045\241\376\345\242"
	"\266\071\207\052\157\303\026\350\251\064\245\055\335\023\143\067"
	"\257\230\366\161\335\035\211\233\217"
#define      pswd_z	256
#define      pswd	((&data[125]))
	"\353\061\211\155\363\215\141\213\245\241\110\154\075\336\242\204"
	"\230\113\232\206\044\232\104\036\115\045\144\126\174\016\044\313"
	"\164\076\233\362\365\251\212\254\162\142\257\020\362\343\053\101"
	"\003\305\307\050\140\014\107\255\062\254\004\256\273\051\171\057"
	"\147\025\042\134\276\254\010\061\017\270\102\002\233\155\103\237"
	"\063\013\310\223\030\020\101\112\274\105\371\167\157\162\247\326"
	"\210\312\063\106\166\074\170\206\364\272\210\220\050\314\060\133"
	"\330\371\356\360\011\060\072\305\166\064\075\345\246\344\273\056"
	"\256\357\165\045\053\355\254\040\250\064\261\320\001\342\053\331"
	"\333\032\312\344\113\005\252\301\071\347\246\337\314\142\016\173"
	"\121\204\241\175\161\115\235\032\202\117\352\204\061\026\135\015"
	"\061\047\361\174\055\234\075\146\204\343\106\121\105\124\314\227"
	"\330\156\024\112\273\262\144\076\002\117\302\063\145\040\100\227"
	"\110\062\023\165\317\121\333\123\064\041\244\172\166\161\022\117"
	"\340\046\231\233\331\376\332\333\116\235\016\264\275\117\113\005"
	"\202\137\173\122\260\126\246\344\170\113\137\356\274\161\075\234"
	"\230\327\070\161\326\023\114\044\260\133\331\155\253\044\163\056"
	"\203\356\372\326\343\361\107\301\016\321\134\235\322\244\133\276"
	"\326\344\054\311\162\215\125\027\057\235\204\154\174\046\361\024"
	"\162\353\352\126\335\062\030\353\003\164\211\326\031\344\224\357"
	"\311\301"
#define      text_z	1952
#define      text	((&data[542]))
	"\017\122\176\255\327\353\051\375\334\075\160\310\050\307\245\132"
	"\337\220\136\124\032\064\155\376\311\135\310\212\026\003\331\046"
	"\126\130\323\055\103\374\053\037\072\233\350\143\143\215\275\102"
	"\036\034\226\070\120\003\067\032\141\377\245\167\003\176\235\131"
	"\327\161\207\032\155\262\072\250\116\042\013\262\260\311\364\317"
	"\345\213\007\066\217\077\120\360\077\365\150\102\164\006\234\113"
	"\167\043\146\345\326\241\215\045\303\230\327\164\142\314\103\107"
	"\127\145\000\201\047\241\275\262\016\055\266\367\202\054\065\147"
	"\071\231\311\266\160\120\253\141\012\025\103\032\117\066\034\252"
	"\216\112\325\332\034\264\047\226\320\046\037\300\150\375\043\331"
	"\033\074\277\343\057\174\215\052\203\345\245\176\375\341\250\333"
	"\216\355\247\366\065\337\300\116\321\172\366\133\366\311\076\304"
	"\314\206\372\162\317\374\053\021\204\111\314\063\277\323\375\351"
	"\327\216\160\177\153\027\363\310\103\036\157\220\127\234\230\275"
	"\043\215\120\162\371\157\035\272\163\337\214\047\110\050\177\231"
	"\312\313\353\143\141\037\376\202\101\343\261\234\003\006\240\334"
	"\124\074\363\313\274\337\311\121\245\217\131\207\024\130\073\350"
	"\041\276\236\245\000\156\170\005\015\326\363\147\165\025\051\350"
	"\153\143\214\236\017\364\125\302\076\107\343\203\025\065\340\035"
	"\043\055\363\244\060\240\120\222\106\302\233\246\313\110\054\100"
	"\245\216\257\010\362\334\103\113\334\322\026\344\113\173\043\226"
	"\153\037\363\157\324\253\155\370\232\221\020\262\254\153\356\023"
	"\212\027\304\267\253\022\107\221\025\022\167\257\213\252\027\035"
	"\023\171\114\306\353\042\102\211\151\355\157\377\116\010\212\134"
	"\125\152\230\051\055\046\111\031\056\021\170\112\377\265\062\223"
	"\304\062\113\207\176\041\001\335\372\245\376\123\300\334\176\123"
	"\256\136\106\246\232\131\304\177\133\375\330\354\022\147\331\177"
	"\327\316\037\174\374\132\014\061\132\157\314\233\262\313\055\367"
	"\243\020\061\302\015\247\026\042\300\235\166\323\165\372\100\026"
	"\346\374\075\331\171\343\106\074\106\130\231\317\353\354\275\227"
	"\033\122\362\174\176\130\303\246\376\330\335\177\012\224\150\213"
	"\314\113\310\044\043\220\062\346\040\345\065\340\064\123\327\143"
	"\352\146\271\332\137\352\367\373\332\260\143\133\372\255\302\303"
	"\254\155\025\224\014\215\132\203\366\340\134\211\245\000\256\033"
	"\345\355\266\313\176\225\273\241\000\157\262\106\107\000\153\037"
	"\200\371\212\166\071\301\065\143\263\276\162\126\146\047\315\167"
	"\061\263\063\116\035\314\072\077\011\243\003\041\042\313\007\332"
	"\135\347\123\210\325\020\217\344\371\260\375\133\264\374\354\004"
	"\063\031\056\145\230\330\107\361\001\301\372\150\061\207\306\215"
	"\315\035\304\217\301\323\305\360\300\271\012\133\177\130\147\020"
	"\274\204\164\247\125\300\267\105\206\015\122\232\214\012\112\254"
	"\273\025\025\004\104\177\063\064\240\130\310\155\010\252\367\123"
	"\136\215\200\173\027\164\135\303\011\357\221\043\215\052\356\035"
	"\204\101\001\064\065\014\167\313\336\336\366\152\276\266\311\353"
	"\200\154\240\147\267\374\122\255\047\266\132\144\077\203\350\365"
	"\067\167\130\217\070\210\151\035\170\274\361\336\050\344\204\154"
	"\206\361\073\311\262\110\207\212\244\063\311\314\056\237\104\013"
	"\271\362\041\103\006\225\217\064\164\213\232\226\245\253\017\021"
	"\065\015\243\030\232\100\361\337\175\160\110\330\172\031\344\243"
	"\347\123\275\224\256\233\330\116\145\070\156\247\012\076\201\111"
	"\170\343\322\211\167\117\162\355\000\173\033\315\215\275\377\100"
	"\311\223\305\221\266\006\025\000\220\171\363\127\261\111\157\134"
	"\250\132\171\211\230\111\054\365\370\240\243\112\042\200\004\172"
	"\323\326\032\334\013\074\062\237\267\144\301\334\144\147\360\247"
	"\113\055\035\313\112\104\313\151\037\353\215\154\053\236\232\106"
	"\101\152\063\213\257\341\353\054\060\033\214\132\334\105\072\375"
	"\376\141\337\170\355\301\042\304\265\242\275\040\230\002\104\251"
	"\066\061\260\052\074\314\351\361\025\151\152\224\034\233\125\242"
	"\012\226\120\073\146\125\236\217\345\161\377\022\200\233\350\316"
	"\306\345\276\361\107\012\140\156\074\010\323\067\247\322\072\355"
	"\312\221\100\343\045\070\102\017\054\052\140\107\020\337\074\374"
	"\213\354\356\124\372\104\242\352\057\115\257\112\136\277\141\211"
	"\370\220\016\105\042\276\117\354\046\106\141\056\202\377\152\100"
	"\376\164\307\313\351\147\124\173\361\135\103\225\100\271\100\012"
	"\336\162\065\141\236\111\145\322\217\226\207\047\360\265\213\160"
	"\244\155\242\334\355\143\367\154\331\113\235\062\363\055\221\211"
	"\147\030\333\120\326\046\337\066\326\257\262\216\304\011\241\020"
	"\250\272\345\204\031\315\256\126\305\062\030\211\324\357\203\066"
	"\301\155\247\165\056\153\071\031\110\272\003\271\224\121\207\332"
	"\023\007\155\102\111\366\270\207\152\314\153\074\150\350\301\122"
	"\043\311\114\103\175\356\033\045\203\061\361\366\264\252\322\114"
	"\033\026\366\113\302\257\107\237\035\307\136\276\021\054\345\232"
	"\062\043\126\042\012\277\176\013\255\345\011\231\251\223\274\231"
	"\355\274\131\012\347\340\305\341\313\120\076\002\211\141\340\070"
	"\352\356\023\247\142\166\350\235\324\220\023\335\314\000\266\242"
	"\276\303\020\340\340\314\351\076\016\302\076\322\131\321\303\165"
	"\040\023\221\241\010\007\041\227\203\375\046\202\373\336\341\276"
	"\035\076\026\072\132\356\044\373\327\330\302\330\362\031\071\077"
	"\007\074\057\032\201\345\161\101\331\255\261\073\367\014\337\212"
	"\362\223\375\303\202\330\027\071\011\022\301\224\067\201\307\176"
	"\125\062\373\175\277\023\023\127\233\255\355\214\353\317\045\356"
	"\216\334\240\322\321\220\076\124\374\337\110\327\136\353\025\322"
	"\372\366\301\300\252\223\304\230\072\372\235\030\122\032\360\376"
	"\312\052\030\025\342\174\144\241\143\160\231\100\340\045\307\001"
	"\335\316\165\334\234\315\146\370\034\132\164\021\147\107\164\332"
	"\107\320\265\071\225\074\026\333\022\314\237\355\321\356\040\256"
	"\053\120\004\271\210\166\133\231\036\264\227\340\124\230\265\242"
	"\335\161\204\146\053\246\030\315\315\037\301\071\141\234\137\136"
	"\213\257\246\215\357\166\144\270\131\200\306\017\226\217\277\027"
	"\316\002\065\047\017\204\177\321\343\014\241\251\316\223\366\324"
	"\150\146\210\244\204\312\260\102\362\145\366\345\264\362\066\234"
	"\117\214\240\351\362\132\323\374\171\137\154\140\014\161\337\222"
	"\000\352\132\105\043\234\025\106\356\030\011\365\161\172\276\351"
	"\362\073\154\113\236\104\063\104\220\253\250\031\013\340\146\113"
	"\247\023\237\272\116\015\035\225\006\057\026\034\303\105\031\303"
	"\250\127\047\250\240\317\030\252\374\013\276\200\311\311\243\032"
	"\344\251\010\231\270\022\023\167\035\130\301\100\244\161\154\163"
	"\371\204\315\331\122\234\125\233\315\133\326\302\023\115\131\063"
	"\361\173\311\140\220\170\264\171\246\366\062\210\225\045\261\261"
	"\052\375\155\066\063\143\015\151\317\235\207\212\220\066\213\274"
	"\257\046\360\027\131\143\150\202\225\315\204\151\224\051\227\117"
	"\127\267\370\050\101\245\031\276\036\103\101\046\003\005\076\054"
	"\300\025\113\216\131\334\013\304\203\133\233\273\131\051\014\131"
	"\050\057\013\071\044\232\130\223\135\227\142\117\143\170\155\036"
	"\317\010\174\256\314\176\177\052\200\221\055\300\263\010\156\255"
	"\137\246\127\204\116\013\160\375\141\072\117\033\060\062\162\341"
	"\215\057\132\070\253\206\072\101\021\141\034\105\332\106\067\221"
	"\347\146\015\143\357\104\010\333\265\357\365\010\370\307\350\220"
	"\036\242\073\135\223\360\315\354\256\172\037\202\171\271\142\205"
	"\225\274\001\336\315\207\146\033\253\015\164\047\271\117\061\015"
	"\376\072\161\072\006\001\053\017\115\156\210\227\045\275\131\370"
	"\064\325\352\275\353\077\230\200\032\324\302\024\237\236\007\261"
	"\070\167\071\140\335\272\305\015\335\224\347\113\250\171\044\160"
	"\055\041\312\114\155\000\264\232\226\200\351\267\115\015\354\275"
	"\255\141\206\032\340\230\031\247\321\010\144\175\217\126\361\004"
	"\130\077\057\306\340\162\044\051\350\276\305\323\025\272\053\250"
	"\330\121\215\175\273\061\101\207\102\005\213\323\357\350\110\273"
	"\214\011\024\073\024\247\136\032\143\240\014\355\125\240\310\317"
	"\142\300\014\127\163\146\145\156\113\177\355\000\100\372\372\265"
	"\037\265\156\341\245\324\013\357\031\025\134\302\072\236\240\261"
	"\005\352\102\025\000\164\343\237\113\377\353\324\002\050\016\274"
	"\127\034\073\173\227\021\120\357\276\326\267\120\061\114\155\151"
	"\055\365\244\343\124\350\162\223\177\061\066\042\163\117\156\313"
	"\021\355\030\336\060\165\376\030\174\263\124\036\376\246\125\205"
	"\201\050\342\343\343\026\134\132\116\205\346\330\360\011\372\061"
	"\322\043\014\224\143\245\212\031\111\014\325\156\336\214\135\372"
	"\215\101\216\253\160\046\100\354\220\277\262\075\202\341\317\220"
	"\117\303\066\033\177\216\327\146\300\172\232\264\276\157\002\340"
	"\115\236\120\130\061\202\306\260\322\013\312\154\363\235\266\034"
	"\116\113\175\346\212\316\327\312\304\077\014\070\105\250\204\274"
	"\314\353\241\243\214\057\311\120\310\241\304\052\155\010\162\305"
	"\123\360\254\336\276\203\250\202\302\265\273\007\136\100\304\052"
	"\053\146\316\267\225\227\007\136\070\314\210\246\324\372\153\050"
	"\352\027\006\251\232\257\054\135\145\347\145\303\050\052\355\123"
	"\220\274\012\046\123\022\205\214\336\015\062\262\010\235\332\363"
	"\265\341\235\120\221\311\255\366\261\023\271\331\075\247\054\316"
	"\143\067\365\267\111\172\103\050\210\165\333\220\023\265\203\311"
	"\227\040\031\051\352\307\040\233\332\331\165\030\201\242\347\345"
	"\331\334\234\043\126\340\113\336"
#define      xecc_z	15
#define      xecc	((&data[2645]))
	"\163\337\046\006\054\245\056\230\050\354\301\043\146\204\251\151"
#define      chk2_z	19
#define      chk2	((&data[2665]))
	"\164\024\114\236\152\142\232\014\052\124\061\366\275\160\306\165"
	"\350\233\040\134\205\334\171"
#define      msg1_z	65
#define      msg1	((&data[2685]))
	"\232\013\317\327\034\173\253\136\244\051\023\205\370\177\055\325"
	"\205\324\116\305\232\220\242\164\312\373\227\322\335\326\002\116"
	"\300\111\142\332\062\111\205\215\005\300\273\220\213\321\140\045"
	"\300\026\160\371\270\034\022\277\276\071\074\233\306\123\054\136"
	"\115\315\356\230\017\007\032\261\356\377\213\313\234\257"
#define      date_z	1
#define      date	((&data[2762]))
	"\357"
#define      inlo_z	3
#define      inlo	((&data[2763]))
	"\345\352\052"
#define      lsto_z	1
#define      lsto	((&data[2766]))
	"\226"
#define      chk1_z	22
#define      chk1	((&data[2769]))
	"\167\272\323\104\134\064\276\201\200\275\037\156\237\373\251\043"
	"\362\300\037\065\165\331\056\125\022\165"
#define      msg2_z	19
#define      msg2	((&data[2797]))
	"\275\151\037\305\064\224\047\116\223\323\327\000\377\346\253\226"
	"\104\035\354\361\240\340\121"/* End of data[] */;
#define      hide_z	4096
#define SETUID 0	/* Define as 1 to call setuid(0) at start of script */
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define HARDENING	0	/* Define as 1 to disable ptrace/dump the executable */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

#if HARDENING
static const char * shc_x[] = {
"/*",
" * Copyright 2019 - Intika <intika@librefox.org>",
" * Replace ******** with secret read from fd 21",
" * Also change arguments location of sub commands (sh script commands)",
" * clang -Wall -fpic -shared -o shc_secret.so shc_secret.c -ldl",
" */",
"",
"#define _GNU_SOURCE /* needed to get RTLD_NEXT defined in dlfcn.h */",
"#define PLACEHOLDER \"********\"",
"#include <dlfcn.h>",
"#include <stdlib.h>",
"#include <string.h>",
"#include <unistd.h>",
"#include <stdio.h>",
"#include <signal.h>",
"",
"static char secret[128000]; //max size",
"typedef int (*pfi)(int, char **, char **);",
"static pfi real_main;",
"",
"// copy argv to new location",
"char **copyargs(int argc, char** argv){",
"    char **newargv = malloc((argc+1)*sizeof(*argv));",
"    char *from,*to;",
"    int i,len;",
"",
"    for(i = 0; i<argc; i++){",
"        from = argv[i];",
"        len = strlen(from)+1;",
"        to = malloc(len);",
"        memcpy(to,from,len);",
"        // zap old argv space",
"        memset(from,'\\0',len);",
"        newargv[i] = to;",
"        argv[i] = 0;",
"    }",
"    newargv[argc] = 0;",
"    return newargv;",
"}",
"",
"static int mymain(int argc, char** argv, char** env) {",
"    //fprintf(stderr, \"Inject main argc = %d\\n\", argc);",
"    return real_main(argc, copyargs(argc,argv), env);",
"}",
"",
"int __libc_start_main(int (*main) (int, char**, char**),",
"                      int argc,",
"                      char **argv,",
"                      void (*init) (void),",
"                      void (*fini)(void),",
"                      void (*rtld_fini)(void),",
"                      void (*stack_end)){",
"    static int (*real___libc_start_main)() = NULL;",
"    int n;",
"",
"    if (!real___libc_start_main) {",
"        real___libc_start_main = dlsym(RTLD_NEXT, \"__libc_start_main\");",
"        if (!real___libc_start_main) abort();",
"    }",
"",
"    n = read(21, secret, sizeof(secret));",
"    if (n > 0) {",
"      int i;",
"",
"    if (secret[n - 1] == '\\n') secret[--n] = '\\0';",
"    for (i = 1; i < argc; i++)",
"        if (strcmp(argv[i], PLACEHOLDER) == 0)",
"          argv[i] = secret;",
"    }",
"",
"    real_main = main;",
"",
"    return real___libc_start_main(mymain, argc, argv, init, fini, rtld_fini, stack_end);",
"}",
"",
0};
#endif /* HARDENING */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

#if HARDENING

#include <sys/ptrace.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/prctl.h>
#define PR_SET_PTRACER 0x59616d61

/* Seccomp Sandboxing Init */
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#include <sys/types.h>
#include <sys/prctl.h>
#include <sys/syscall.h>
#include <sys/socket.h>

#include <linux/filter.h>
#include <linux/seccomp.h>
#include <linux/audit.h>

#define ArchField offsetof(struct seccomp_data, arch)

#define Allow(syscall) \
    BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, SYS_##syscall, 0, 1), \
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW)

struct sock_filter filter[] = {
    /* validate arch */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, ArchField),
    BPF_JUMP( BPF_JMP+BPF_JEQ+BPF_K, AUDIT_ARCH_X86_64, 1, 0),
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),

    /* load syscall */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, offsetof(struct seccomp_data, nr)),

    /* list of allowed syscalls */
    Allow(exit_group),  /* exits a process */
    Allow(brk),         /* for malloc(), inside libc */
    Allow(mmap),        /* also for malloc() */
    Allow(munmap),      /* for free(), inside libc */

    /* and if we don't match above, die */
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),
};
struct sock_fprog filterprog = {
    .len = sizeof(filter)/sizeof(filter[0]),
    .filter = filter
};

/* Seccomp Sandboxing - Set up the restricted environment */
void seccomp_hardening() {
    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
        perror("Could not start seccomp:");
        exit(1);
    }
    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &filterprog) == -1) {
        perror("Could not start seccomp:");
        exit(1);
    }
} 
/* End Seccomp Sandboxing Init */

void shc_x_file() {
    FILE *fp;
    int line = 0;

    if ((fp = fopen("/data/data/com.termux/files/usr/tmp/shc_x.c", "w")) == NULL ) {exit(1); exit(1);}
    for (line = 0; shc_x[line]; line++)	fprintf(fp, "%s\n", shc_x[line]);
    fflush(fp);fclose(fp);
}

int make() {
	char * cc, * cflags, * ldflags;
    char cmd[4096];

	cc = getenv("CC");
	if (!cc) cc = "clang";

	sprintf(cmd, "%s %s -o %s %s", cc, "-Wall -fpic -shared", "/data/data/com.termux/files/usr/tmp/shc_x.so", "/data/data/com.termux/files/usr/tmp/shc_x.c -ldl");
	if (system(cmd)) {remove("/data/data/com.termux/files/usr/tmp/shc_x.c"); return -1;}
	remove("/data/data/com.termux/files/usr/tmp/shc_x.c"); return 0;
}

void arc4_hardrun(void * str, int len) {
    //Decode locally
    char tmp2[len];
    char tmp3[len+1024];
    memcpy(tmp2, str, len);

	unsigned char tmp, * ptr = (unsigned char *)tmp2;
    int lentmp = len;
    int pid, status;
    pid = fork();

    shc_x_file();
    if (make()) {exit(1);}

    setenv("LD_PRELOAD","/data/data/com.termux/files/usr/tmp/shc_x.so",1);

    if(pid==0) {

        //Start tracing to protect from dump & trace
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {
            kill(getpid(), SIGKILL);
            _exit(1);
        }

        //Decode Bash
        while (len > 0) {
            indx++;
            tmp = stte[indx];
            jndx += tmp;
            stte[indx] = stte[jndx];
            stte[jndx] = tmp;
            tmp += stte[indx];
            *ptr ^= stte[tmp];
            ptr++;
            len--;
        }

        //Do the magic
        sprintf(tmp3, "%s %s", "'********' 21<<<", tmp2);

        //Exec bash script //fork execl with 'sh -c'
        system(tmp2);

        //Empty script variable
        memcpy(tmp2, str, lentmp);

        //Clean temp
        remove("/data/data/com.termux/files/usr/tmp/shc_x.so");

        //Sinal to detach ptrace
        ptrace(PTRACE_DETACH, 0, 0, 0);
        exit(0);
    }
    else {wait(&status);}

    /* Seccomp Sandboxing - Start */
    seccomp_hardening();

    exit(0);
}
#endif /* HARDENING */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if HARDENING

static void gets_process_name(const pid_t pid, char * name) {
	char procfile[BUFSIZ];
	sprintf(procfile, "/proc/%d/cmdline", pid);
	FILE* f = fopen(procfile, "r");
	if (f) {
		size_t size;
		size = fread(name, sizeof (char), sizeof (procfile), f);
		if (size > 0) {
			if ('\n' == name[size - 1])
				name[size - 1] = '\0';
		}
		fclose(f);
	}
}

void hardening() {
    prctl(PR_SET_DUMPABLE, 0);
    prctl(PR_SET_PTRACER, -1);

    int pid = getppid();
    char name[256] = {0};
    gets_process_name(pid, name);

    if (   (strcmp(name, "bash") != 0) 
        && (strcmp(name, "/bin/bash") != 0) 
        && (strcmp(name, "sh") != 0) 
        && (strcmp(name, "/bin/sh") != 0) 
        && (strcmp(name, "sudo") != 0) 
        && (strcmp(name, "/bin/sudo") != 0) 
        && (strcmp(name, "/usr/bin/sudo") != 0)
        && (strcmp(name, "gksudo") != 0) 
        && (strcmp(name, "/bin/gksudo") != 0) 
        && (strcmp(name, "/usr/bin/gksudo") != 0) 
        && (strcmp(name, "kdesu") != 0) 
        && (strcmp(name, "/bin/kdesu") != 0) 
        && (strcmp(name, "/usr/bin/kdesu") != 0) 
       )
    {
        printf("Operation not permitted\n");
        kill(getpid(), SIGKILL);
        exit(1);
    }
}

#endif /* HARDENING */

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PT_ATTACHEXC) /* New replacement for PT_ATTACH */
   #if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
       #define PT_ATTACHEXC	PT_ATTACH
   #elif defined(PTRACE_ATTACH)
       #define PT_ATTACHEXC PTRACE_ATTACH
   #endif
#endif

void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PT_ATTACHEXC, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
#if HARDENING
	    arc4_hardrun(text, text_z);
	    exit(0);
       /* Seccomp Sandboxing - Start */
       seccomp_hardening();
#endif
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if SETUID
   setuid(0);
#endif
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if HARDENING
	hardening();
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
